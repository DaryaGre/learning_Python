# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

class Cell:
    def __init__(self, count_c):
        self.count_c = count_c

    # Сложение. Объединение двух клеток.
    # При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self, other):
        return Cell(self.count_c + other.count_c)

    # Вычитание. Участвуют две клетки.
    # Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
    # иначе выводить соответствующее сообщение.
    def __sub__(self, other):
        if self.count_c - other.count_c > 0:
            return Cell(self.count_c - other.count_c)
        else:
            print('Разность количества ячеек двух клеток меньше нуля')
            return

    # Умножение. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
    def __mul__(self, other):
        return Cell(self.count_c * other.count_c)

    # Деление. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    def __truediv__(self, other):
        return Cell(self.count_c // other.count_c)

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    # Данный метод позволяет организовать ячейки по рядам.
    # Метод должен возвращать строку вида *****\n*****\n*****...,
    # где количество ячеек между \n равно переданному аргументу.
    # Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    def make_order(self, cell_row):
        i = 1
        _txt = ''
        while i <= self.count_c // cell_row:
            _txt = f'{_txt}{"*" * cell_row}\n'
            i += 1
        _txt = f'{_txt}{"*" * (self.count_c % cell_row)}'
        return _txt


c1 = Cell(12)
c2 = Cell(7)
c3 = c1 + c2
c4 = c1 - c2
c5 = c1 * c2
c6 = c1 / c2
print("Исходная клетка с1")
print(c1.make_order(5))
print("Исходная клетка с2")
print(c2.make_order(5))
print("Результат сложения c1 + c2")
print(c3.make_order(5))
print("Результат вычитания c1 - c2")
print(c4.make_order(5))
print("Результат умножения c1 * c2")
print(c5.make_order(5))
print("Результат деления c1 / c2")
print(c6.make_order(5))
